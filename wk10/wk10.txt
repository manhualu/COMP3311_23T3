Q4)
R
A	B	C
a1	b1	c1
a1	b2	c2
a2	b1	c1

S
B	C
b1	c1
b2	c2

Give the relation that results from each of the following relational algebra expressions on these relations: 
a) R Div S
    Find the items in R that are associated with all entries in S.
    A
    a1
    

b) R Div (Sel[B != b1](S))
    Tmp1 = Sel[B != b1](S)
    B   C
    b2  c2

    R Div Tmp1
    A
    a1

c) R Div (Sel[B != b2](S))
    Tmp1 = Sel[B != b2](S)
    B   C
    b1  c1

    R Div Tmp1
    A
    a1
    a2

d) (R x S) - (Sel[R.C=S.C](R Join[B=B] S))
    Tmp1 = R x S
    R.A  R.B  R.C  S.B  S.C
    a1   b1   c1   b1   c1
    a1   b1   c1   b2   c2
    a1   b2   c2   b1   c1
    a1   b2   c2   b2   c2
    a2   b1   c1   b1   c1
    a2   b1   c1   b2   c2

    Tmp2 = R Join[B=B] S
    R.A  R.B  R.C  S.B  S.C
    a1   b1   c1   b1   c1
    a1   b2   c2   b2   c2
    a2   b1   c1   b1   c1

    Tmp3 = Sel[R.C=S.C](Tmp2)
    R.A  R.B  R.C  S.B  S.C
    a1   b1   c1   b1   c1
    a1   b2   c2   b2   c2
    a2   b1   c1   b1   c1

    Res = Tmp1 - Tmp3
    R.A  R.B  R.C  S.B  S.C
    a1   b1   c1   b2   c2
    a1   b2   c2   b1   c1
    a2   b1   c1   b2   c2


Precedence Graph Example:

T1:  R(X) W(X)           R(Y)
T2:            R(X) W(Y) 

T1 -> T2 (draw an edge because T1 has to finish writing X before T2 reads X)
T2 -> T1 (draw an edge because T2 has to finish writing Y before T1 reads Y)

Cycle => this schedule is not conflict serialisable


Q11)
Draw the precedence graph for the following schedule (where C means "commit"):
T1:          R(A) W(Z)                         C
T2:                          R(B) W(Y)            C
T3: W(A)                                 W(B)        C

T3 -> T1 (Write A in T3 before Read A in T1)
T2 -> T3 (Read B in T2 before Write B in T3)

T2 -> T3 -> T1

No Cycles => Schedule is conflict serialisable


Q12)
T1: R(X) R(Y) W(X)           W(X)
T2:                R(Y)           R(Y)
T3:                     W(Y)

a) Determine whether schedule is conflict-serialisable.
T3 -> T2 (Write Y in T3 before Read Y in T2)
T1 -> T3 (Read Y in T1 before Write Y in T3)
T2 -> T3 (Read Y in T2 before Write Y in T3)

Cycle => Not Conflict Serialisable

b) Modify S to create a complete schedule that is conflict-serialisable
Trick question. This is not possible as the precendence graph is cyclic, it is not conflict-serialisable.


Q13)
For each of the following schedules, state whether it is conflict-serializable and/or view-serializable.
If you cannot decide whether a schedule belongs to either class, explain briefly.
The actions are listed in the order they are scheduled, and prefixed with the transaction name.

View Equivalence tldr;
    Initial READ must be same in both schedules
    Final WRITE must be same in both schedules
    Any Read after Write must be the same in both schedules
    Any conflict serialisable schedule is also view serialisaible

Serial schedule: no overlaps with schedules. T1 runs entirely and then T2 runs or vice versa.

a) T1:R(X) T2:R(X) T1:W(X) T2:W(X)

T1: R(X)      W(X)
T2:      R(X)       W(X)

Conflict Serialisable?
T2 -> T1 (R before W)
T1 -> T2 (W before W)

Cycle => Not Conflict Serialisable

View Serialisable?
    All possible serial schedules: 
        T1 -> T2
        T2 -> T1 
        
    We can narrow down that T1 must be first and T2 must be last in our serial schedule because initial READ and final WRITE must stay the same, leaving us with:
    T1 -> T2 

Swap R(X) in T2 and W(X) in T1 
T1: R(X) W(X)
T2:           R(X) W(X)
    (remember you can only swap the order not what operation each transaction is executing)


=> check view equivalence
Initial READ must be same in both schedules (checked)
Final WRITE must be same in both schedules (checked)
Any Read after Write must be the same in both schedules (not same, there is read after write in serial but not in OG)

Therefore, NOT view serialisable. 


b) T1:W(X) T2:R(Y) T1:R(Y) T2:R(X)

T1: W(X)      R(Y)
T2:      R(Y)       R(X)

Conflict Serialisable?
T1 -> T2 (R after W)

no cycle => Conflict Serialisable

View Serialisable?
For any conflict serialisable schedule, it must also be view serialisable.


c) T1:R(X) T2:R(Y) T3:W(X) T2:R(X) T1:R(Y)

T1: R(X)                R(Y)
T2:      R(Y)      R(X)
T3:           W(X)    

Conflict Serialisable?
T1 -> T3 (R before W)
T3 -> T2 (W before R)

Not cycle => Conflict Serialisable

View Serialisable?
For any conflict serialisable schedule, it must also be view serialisable.


d) T1:R(X) T1:R(Y) T1:W(X) T2:R(Y) T3:W(Y) T1:W(X) T2:R(Y)

T1: R(X) R(Y) W(X)           W(X)       
T2:                R(Y)           R(Y)
T3:                     W(Y)

Conflict Serialisable?
T1 -> T3 (R before W)
T2 -> T3 (R before W)
T3 -> T2 (W before R)

Cycle => Not Conflict Serialisable

View Serialisable?
Narrow down that T1 must be first and T2 must be last in our serial schedule, leaving us with:
T1 -> T3 -> T2 

To get T1 -> T3 -> T2, this must require you to swap R(Y) in T2 and W(Y) in T3, so that T3 comes first and then T2 
    (remember you can only swap the order not what operation each transaction is executing)
i.e. 
T1: R(X) R(Y) W(X)           W(X)       
T2:                     R(Y)      R(Y)
T3:                W(Y)     

Doing this will mean that a read after write will occur there in serial schedule, but NOT in OG
Therefore, NOT view serialisable. 


e) T1:R(X) T2:W(X) T1:W(X) T3:W(X)

T1: R(X)      W(X)
T2:      W(X)
T3:               W(X)

Conflict Serialisable?
T1 -> T2 (R before W)
T2 -> T1 (W before W)
T1 -> T3 (R before W)

Cycle => Not Conflict Serialisable

View Serialisable?
    All possible serial schedules: 
        T1->T3->T2 (remove, not T3 last -> last write must be the same)
        T2->T3->T1 (remove, not T3 last -> last write must be the same)
        T2->T1->T3 (remove, not T1 first -> first read must be the same)
        T3->T2->T1 (remove, not T3 last -> last write must be the same)
        T3->T1->T2 (remove, not T3 last -> last write must be the same)

You can narrow down the list by finding out what comes first and last.
    T1 goes first
    T3 goes last

T1 -> T2 -> T3
Swap W(X) and W(X) to get:
T1: R(X) W(X)    
T2:           W(X)
T3:               W(X)


=> check view equivalence
Initial READ must be same in both schedules (checked)
Final WRITE must be same in both schedules (checked)
Any Read after Write must be the same in both schedules (checked)

View Serialised Schedule:
T1: R(X) W(X)
T2:           W(X)
T3:               W(X)

Therefore, yes schedule is view serialisable.
